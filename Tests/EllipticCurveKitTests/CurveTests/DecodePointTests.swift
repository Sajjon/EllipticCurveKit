//
//  File.swift
//  
//
//  Created by Alexander Cyon on 2021-03-02.
//

import XCTest
@testable import EllipticCurveKit

final class DecodePointTests: XCTestCase {
	
	func testCompressedPublicKey() throws {
		let compressedPublicKeyBytes = Data(hex: "0339a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c2")
		let decodedFromUncompressed = try AffinePoint<Secp256k1>.decodeFromCompressedPublicKey(
			bytes: compressedPublicKeyBytes
		)
		
		let expectedUncompressedHex = "0439a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c23cbe7ded0e7ce6a594896b8f62888fdbc5c8821305e2ea42bf01e37300116281"
		XCTAssertEqual(PublicKey<Secp256k1>.init(point: decodedFromUncompressed).hex.uncompressed.lowercased(), expectedUncompressedHex)
	}
    
    func testPointDecoding() throws {

        let compressPublicKeyBytes = Data(hex: "035D21E7A118C479A007D45401BDBD06E3F9814AD5BBBBC5CEC17F19029A060903")
        
        XCTAssertEqual(compressPublicKeyBytes.count, 33)
        
        let decodedFromUncompressed = try AffinePoint<Secp256k1>.decodeFromCompressedPublicKey(
            bytes: compressPublicKeyBytes
        )
        
        let expectedY = "CCFCA71EFF2101AD68238112E7585110E0F2C32D345225985356DC7CAB8FDCC9"
        XCTAssertEqual(decodedFromUncompressed.y.asHexString(), expectedY)

    }
    
    func testVectors() throws {
        func doTest(vector: Vector)  throws {
            guard
                let x = Number(vector.x, radix: 16),
                let y = Number(vector.y, radix: 16)
            else { return XCTFail("Failed to decode numbers") }
                
            let expected = AffinePoint<Secp256k1>(
                x: x,
                y: y
            )
            
            let actual = try AffinePoint<Secp256k1>.decodeFromCompressedPublicKey(bytes: Data(hex: vector.compressed))
            
            XCTAssertEqual(actual, expected)
        }
        
        try vectors.forEach(doTest(vector:))
    }
    
}

private typealias Vector = (
    compressed: String,
    x: String,
    y: String
)

// Generated by this library...
private let vectors: [Vector] = [
    (
        compressed: "036F9BF457959CCEAD9815122D52715BADE67D6A21DC5A812C0AAB2FD3CCFA4DF7",
        x: "6F9BF457959CCEAD9815122D52715BADE67D6A21DC5A812C0AAB2FD3CCFA4DF7",
        y: "D5086E886F7F7D66EFC0F94637CF9CA66318AE525F08B6EA1415F16B89A1333"
    ),
    (
        compressed: "02C6529FF290A89B3BF8603A2FB462E82013157326960C985ED53BE699A471A5BC",
        x: "C6529FF290A89B3BF8603A2FB462E82013157326960C985ED53BE699A471A5BC",
        y: "3D6222ADE48C623568CD3B020B0BAF0436439F1792CC0FB8F277D9EB0F3AEE8C"
    ),
    (
        compressed: "02509F045CE688AE2891D387828CB26FCF9816939AED5931B38E5C5C578E5822D2",
        x: "509F045CE688AE2891D387828CB26FCF9816939AED5931B38E5C5C578E5822D2",
        y: "91FED9AEB83812E21414598E93F04C90CBD21E111CB523D5A212055B63A7404E"
    ),
    (
        compressed: "03963F5171A5A9E39B2CF7D634C4239BF9A31074B7432469A159C250FFB7A32E2A",
        x: "963F5171A5A9E39B2CF7D634C4239BF9A31074B7432469A159C250FFB7A32E2A",
        y: "1DC216841D92910D60FA0D17E7F5DBDDAE743ABFA99E475CEE722DD3080F24D"
    ),
    (
        compressed: "03AA40AC96D92650D3C8A60D4BD8972F4CD8CF2A4C2C65EED7BC990A824CEE45BD",
        x: "AA40AC96D92650D3C8A60D4BD8972F4CD8CF2A4C2C65EED7BC990A824CEE45BD",
        y: "EA10A33B08A2BE10A355F7CEF0011F760FB5F9CE4E9A28BCF21E08F70525F855"
    ),
    (
        compressed: "0392EED6A0297E877B6FD6BAEE01AFE3A3E403CF86F615D666FF8FF1A8BEC4D4DD",
        x: "92EED6A0297E877B6FD6BAEE01AFE3A3E403CF86F615D666FF8FF1A8BEC4D4DD",
        y: "BDD9BA7C52E34AF8B3C570F59C5C8BD77012B1330A0FFA4E042E4170E39FA73F"
    ),
    (
        compressed: "036D12735F2C3A964D37A6FC7CF285CDD4088A3061363568914143F96E98FF1D06",
        x: "6D12735F2C3A964D37A6FC7CF285CDD4088A3061363568914143F96E98FF1D06",
        y: "F432639071EB9DBDB6D523DA806365E316AD85381843D53CE5634338B046F72D"
    ),
    (
        compressed: "032EDE790DBC4824EBB718288D378C826EC21E8DCA356DF46EFF108D908541045D",
        x: "2EDE790DBC4824EBB718288D378C826EC21E8DCA356DF46EFF108D908541045D",
        y: "298DC8C36F7558A7FCCA476D2F1EB3D93A001E68B2663B45878BFD3F3A5BC3C3"
    ),
    (
        compressed: "03D5945A8C9F2DA72B63585A1358143B60485574CD0E5034B9A003B65C3AEE595A",
        x: "D5945A8C9F2DA72B63585A1358143B60485574CD0E5034B9A003B65C3AEE595A",
        y: "F1587934294C74636759CB19509E2A51BF7857A2742BF766E17331640C5599F3"
    ),
    (
        compressed: "03FCCF97839C656EADF2E11B99FBDB6EC14CC6C44B65AC61541C8AE98E1C2CB3EB",
        x: "FCCF97839C656EADF2E11B99FBDB6EC14CC6C44B65AC61541C8AE98E1C2CB3EB",
        y: "696735832A1A2D152A8D89CAA28D518362057ADF076FBC0A0C282FA4026EE5B9"
    ),
    (
        compressed: "03D0DC02F7784B7871E2BC7214FD926E90D7C9039A8AE1BF15E9A04487FEBAB4A5",
        x: "D0DC02F7784B7871E2BC7214FD926E90D7C9039A8AE1BF15E9A04487FEBAB4A5",
        y: "3B91AB9268B53B0A952311E7E108F9310224B99C485D0691488C47D1EF934E93"
    )
]
